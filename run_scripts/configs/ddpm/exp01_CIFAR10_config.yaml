
model:
  target: models.ddpm_st_diffusion.DDPM
  params:
    dataset:
      target: diffusion_modules.diffusion_utils.dataloader.load_CIFAR10 #options: load_MNIST, load_EMNIST, load_CIFAR10, load_FashonMNIST, load_StanfordCars
      params:
        image_size: &IMG_SIZE 32 # 32x32
        channels: &IMG_CHANNELS 3 # 3 if: RGB, else: 1 for Grayscale
        
    linear_start: 0.0001
    linear_end: 0.02
    image_size: *IMG_SIZE
    channels: *IMG_CHANNELS 
    batch_size: &BATCH_SIZE 32 #128    
    timesteps: 1000 # diffusion timesteps
    max_tsteps: 2 #4e5
    learning_rate: 2.0e-4 #1.0e-04
#     warmup_steps: 5000
    num_of_train_samples: 400
    num_of_val_samples: 100 
    loss_type: "huber" # options: 'l1', 'l2' and 'huber'
    beta_schedule: "linear" # options: linear, cosine, sqrt, sqrt_linear
    parameterization: "eps" # options: "eps" and "x0"
    use_ema: True
    ema_decay_factor: 0.9999

    scheduler_config:
      target: utils.beta_schedule.BetaSchedule.linear_beta_schedule
      params:
        beta_start: 0.0001
        beta_end: 0.02
        s: 0.008 # used in cosine scheduler

    unet_rosinality_config:
      target: diffusion_modules.unet_arch.unet_rosinality.Unet
      params:
        in_channel: *IMG_CHANNELS
        channel: 128 # model channels
        channel_multiplier: [1,2,2,2]
        n_res_blocks: 2
        attn_strides: [16]
        attn_heads: 1
        use_affine_time: False
        dropout: 0.1
        fold: 1    

#     unet_config:
#       target: nn_arch.unet.SimpleUnet
#       params:
#         in_channels: *IMG_CHANNELS
#         out_channels: *IMG_CHANNELS
#         down_channels: [64, 128, 256, 512, 1024]
#         up_channels: [1024, 512, 256, 128, 64]
#         image_size: *IMG_SIZE
#         batch_size: *BATCH_SIZE
#         # regularization
#         drop_out: 0.2
        
#     modified_unet_config:
#       target: diffusion_modules.modifiedunet.Unet
#       params:
#         in_channels: *IMG_CHANNELS
#         out_channels: *IMG_CHANNELS
#         image_size: *IMG_SIZE
#         # batch_size: *BATCH_SIZE
#         dim_mults: [1,2,2,2]
#         init_dim: 64 # dims:  [64 (init_dim), 128 (dim), 256, 256, 256]; in_out:[(64,128), (128,256), (256,256), (256,256)]
#         dim: 128 # model channels
#         resnet_block_groups: 8 # not used if using convnext
#         use_convnext: False
#         # regularization
#         drop_out: 0.1   
        
#     openai_unet_config:
#       target: diffusion_modules.openaimodels.UNetModel
#       params:
#         image_size: *IMG_SIZE
#         in_channels: *IMG_CHANNELS
#         out_channels: *IMG_CHANNELS
#         model_channels: 128
#         attention_resolutions:
#         # downsampling factor
#         - 2
#         num_res_blocks: 2
#         channel_mult:
#         - 1
#         - 2
#         - 2
#         - 2
#         num_heads: 1
#         use_spatial_transformer: False
#         transformer_depth: 1
#         dropout: 0.1
        # context_dim: 192 #512
      